# Default values for workout-management-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  registry: docker.io
  repository: mihirajakuruppu123/workout-app-new
  #mihirajakuruppu123/workout-app-new
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:  latest

containerPort:
  port: 5000
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: 
  app: workout-app

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
 - name: image-storage
   persistentVolumeClaim:
     claimName: image-storage-claim
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
 - name: image-storage
   mountPath: "/app/static/uploads"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

labels:
  app: workout-app

selectorLabels:
  app: workout-app

service:
  - name: webapp-service
    type: NodePort
    port: 5000
    targetPort: 5000
    nodePort: 30009
    protocol: TCP
    labels:
      app: workout-app
    selectorLabels:
      app: workout-app

  - name: postgres-service
    type: ClusterIP
    port: 5432
    targetPort: 5432
    protocol: TCP
    labels:
      app: postgres
    selectorLabels:
      app: postgres

statefulset:
  - name: "postgres"
    database-protocol: "postgresql://"
    replicas: 1
    labels:
      app: postgres
    selectorLabels:
      app: postgres
    image:
      repository: "postgres"
    imagetag: "15"
    volume:
      name: "database-storage"
      accessMode: ReadWriteMany
      size: "5Gi"
      storageClass: "standard"
      mountPath: "/var/lib/postgresql/data"
    userKey: "USER_NAME"
    dbKey: "DATABASE_NAME"
    passKey: "PASSWORD"

configMap:
  - user:
      userKey: "POSTGRES_USER"
    db:
      dbKey: "POSTGRES_DB"
    name: postgres
 
secret:
  - name: postgres
    key: "POSTGRES_PASSWORD" 

  - name: web-app
    key: "USER_PASSWORD" 

persistentVolume:
  - name: "image-storage-pv"
    capacity: "5Gi"  
    volumeMode: "Filesystem"
    accessModes:
      - "ReadWriteMany"
    reclaimPolicy: "Retain"
    storageClass: "standard"
    hostPath: "/mnt/data/uploads"  
    type: "DirectoryOrCreate"
    labels:
      app: workout-app
    annotations:
      enabled: true
      policy: "keep"     

persistentVolumeClaim:
  - name: image-storage-claim
    labels:
      app: workout-app
    accessModes:
      - "ReadWriteMany"
    capacity: "5Gi"
    storageClass: "standard"
    volumeName: image-storage-pv
    annotations:
      enabled: true
      policy: "keep"



